{"version":3,"sources":["../js/file_uploader.js","../js/_init.js","../js/_create_uploader.js","../js/_set_options.js"],"names":["FileUploader2","upl","mimetypes","auto","img","pdf","fupl_selector_data_name","isSuitableBrowser","div","document","createElement","window","parse_max_filesize","filesize_value","locales","maxbytes","unit","feedback_size","isNaN","substr","toUpperCase","length","Math","round","toLocaleString","init","user_global_options","global_options","setOptions","css","head","insertAdjacentHTML","querySelectorAll","forEach","upl_element","upl_element_options","dataset","JSON","parse","element","_input","querySelector","url","Error","filetype","toLowerCase","Object","keys","indexOf","accept_attr","accept_params","accept","split","map","item","trim","getAttribute","_toConsumableArray","Set","concat","max_filesize","multiple","Boolean","hasAttribute","required","e","console","error","createUploader","alert","unsuitableBrowserMessage","fupl_options","debug","groupCollapsed","c_options","c_keys","sort","_toStringify","_typeof","stringify","table","log","groupEnd","_label","label_text","innerHTML","classList","add","element_class","add_label","init_callback","default_options","alert_api","mes","template","upload_start_callback","upload_complete_callback","element_dragover_class","label_btn_class","dd_text_single","dd_text_multiple","show_info_text","custom_info_text","info_text_join_string","img_min_w","img_max_w","img_w","img_min_h","img_max_h","img_h","varname","values","_len","arguments","custom_options","Array","_key","assign","apply","_ret","opts","_loop","i","undefined","v"],"mappings":"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","sourcesContent":["/*!\n *\n * FileUploader 2.0\n * HTML5 / JS Async Uploader\n * Massimo Cassandro 2017-2019\n *\n */\n\n/* eslint no-console: 0, no-unused-vars: 0, no-empty:  0 */\n/* exported FileUploader2 */\n\n/*\n@codekit-append '_set_options.js'\n@codekit-append '_create_uploader.js'\n\n@codekit-append '_init.js'\n\n*/\n\nvar FileUploader2 = (() => {\n  \"use strict\";\n  let upl = {};\n\n  return upl;\n})();\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  // VARIABILI E METODI PRIVATI\n\n  // mimetypes ed estensioni accettabili in base al parametro `filetype`.\n  // Il parametro `auto` accetta tutti i tipi di file (salvo eventuali limitazioni\n  // aggiunte tramite parametro e attributo `accept`)\n  const mimetypes = {\n    auto : null,\n    img  : ['image/png', 'image/jpeg', 'image/pjpeg', 'image/gif', 'image/webp',\n            '.png', '.jpg', '.jpeg', '.pjpg', '.pjpeg', '.gif', '.webp'],\n    pdf  : ['application/pdf', '.pdf']\n  },\n\n  // nome dell'attributo data da usare come selettore degli elementi su cui applicare FileUploader.\n  fupl_selector_data_name = 'file_uploader2',\n\n  /*\n    isSuitableBrowser\n    Verifica che il browser sia in grado di gestire le funzionalità richieste.\n    Restituisce `true` o `false`\n  */\n  isSuitableBrowser = () => {\n    var div = document.createElement( 'div' );\n    return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) )\n      && 'FormData' in window\n      && 'FileReader' in window;\n  },\n\n  /*\n   parse_max_filesize\n   elabora il parametro `filesize_value` (se esiste) e restituisce:\n    - `null` se `filesize_value` === null`\n    - `false` se `filesize_value` non è un valore corretto\n    - l'oggetto `{ maxbytes: 123456, unit: 'KB', feedback_size: ''}`\n    in cui:\n      - `maxbytes` è il valore in bytes del limite imposto\n      - `unit` è uno tra 'KB' e 'MB'\n      - `feedback_size` è la rappresentazione per un eventuale feedback per l'utente\n  */\n  parse_max_filesize = (filesize_value, locales) =>  {\n    // controllo max_filesize ed elaborazione parametro\n    if( filesize_value ) {\n      var maxbytes, unit, feedback_size;\n\n      if(!isNaN(filesize_value)) { //solo numero, si assume siano KB\n        maxbytes = +filesize_value;\n        unit = 'KB';\n        feedback_size = filesize_value;\n\n      } else {\n\n        unit = filesize_value.substr(-2, 2).toUpperCase();\n        maxbytes = +filesize_value.substr(0, filesize_value.length-2);\n        feedback_size = maxbytes;\n\n        if(isNaN(maxbytes) || (unit !== 'KB' && unit !== 'MB') ) {\n          return false;\n        }\n      }\n\n      // se l'unità è indicata in KB ma il valore è più grande\n      // di un MB, il parametro viene aggiornato\n      if( maxbytes >= 1024 && unit === 'KB') {\n        unit = 'MB';\n        feedback_size = (Math.round((maxbytes / 1024) * 100) /100);\n      }\n\n      if(unit === 'KB') {\n        maxbytes = maxbytes * 1024;\n      } else {\n        maxbytes = maxbytes * 1024 * 1024;\n      }\n\n      return {\n        //'original_value': filesize_value,\n        //'unit'         : unit,\n        'maxbytes'     : maxbytes,\n        'feedback_size': feedback_size.toLocaleString(locales) + '&nbsp;' + unit\n      };\n\n    } else {\n      return null;\n    }\n  };\n\n  /*\n    init\n    Seleziona gli elementi con l'attributo `fupl_selector` e avvia FileUploader\n  */\n  upl.init = (user_global_options) => {\n\n    const global_options = upl.setOptions(user_global_options);\n\n    // verifica che il browser sia compatibile\n    if( !isSuitableBrowser() ) {\n      alert(global_options.unsuitableBrowserMessage);\n      return;\n    }\n\n    // caricamento CSS\n    if(global_options.css) {\n      document.head.insertAdjacentHTML('beforeend',\n        '<link rel=\"stylesheet\" href=\"' + global_options.css + '\" type=\"text/css\" media=\"all\">'\n      );\n    }\n\n    // istanze uploader\n    document.querySelectorAll('[data-' + fupl_selector_data_name + ']').forEach( upl_element => {\n\n      /*\n        merge dei parametri inseriti tramite attributi `data`, in cui:\n\n        * `upl_element.dataset`:\n            tutti gli attributi inseriti singolarmente (es. data-filetype=\"img\")\n\n        * `upl_element.dataset[fupl_selector_data_name]`:\n            attributi inseriti tramite json assegnato a `data- + 'fupl_selector_data_name'`\n            (es data-file_uploader2='{\"filetype\":\"img\"}')\n\n        In caso di conflitto prevalgono gli ultimi\n      */\n\n      let upl_element_options = upl_element.dataset[fupl_selector_data_name];\n\n      if(upl_element_options === '') {\n        upl_element_options = {};\n      } else {\n        upl_element_options = JSON.parse(upl_element_options);\n      }\n\n      upl_element_options = upl.setOptions(\n        {},\n        global_options,\n        upl_element.dataset,\n        upl_element_options\n      );\n\n      // cancella la chiave `fupl_selector_data_name` al solo scopo di ridurre la confusione\n      delete upl_element_options[fupl_selector_data_name];\n\n      // aggiunta dell'elemento stesso ad  `istance_options`:\n      upl_element_options.element = upl_element;\n\n      // controllo parametri e avvio uploader\n      try {\n\n        // eventuale campo input\n        let _input = upl_element.querySelector('input[type=\"file\"]');\n\n        //  url\n        if( !upl_element_options.url ) {\n          throw new Error( \"Parametro `url` non impostato\" );\n        }\n\n        //  parametro filetype\n        upl_element_options.filetype = upl_element_options.filetype.toLowerCase();\n        if( Object.keys(mimetypes).indexOf(upl_element_options.filetype) === -1 ) {\n\n          throw new Error( \"Parametro `filetype` non corretto\" );\n        } else {\n          // implementazione eventuali parametro/attributo `accept`\n          if( upl_element_options.filetype === 'auto' ) {\n\n            let accept_attr = [],\n            accept_params = [];\n\n            if( upl_element_options.accept !== null ) {\n              accept_params = upl_element_options.accept\n                .split(',').map( item => item.trim() );\n            }\n\n            if(_input && _input.getAttribute('accept') ) {\n              accept_attr = _input.getAttribute('accept')\n                .split(',').map( item => item.trim() );\n            }\n\n            // https://www.peterbe.com/plog/merge-two-arrays-without-duplicates-in-javascript\n            upl_element_options.accept = [...new Set([...accept_params, ...accept_attr])];\n\n          } else {\n            upl_element_options.accept = mimetypes[upl_element_options.filetype];\n          }\n\n          // elaborazione max_filesize\n          let max_filesize = parse_max_filesize(upl_element_options.max_filesize, upl_element_options.locales);\n          if( max_filesize === false ) {\n            throw new Error( '\"' + upl_element_options.max_filesize + '\" non è un valore corretto per `max_filesize`');\n          } else {\n            upl_element_options.max_filesize = max_filesize;\n          }\n\n          // parametro o attributo multiple\n          upl_element_options.multiple = Boolean(upl_element_options.multiple ||\n            (_input && _input.hasAttribute('multiple') ));\n\n          // parametro o attributo required\n          upl_element_options.required = Boolean(upl_element_options.required ||\n            (_input && _input.hasAttribute('required') ));\n        }\n\n      } catch(e) {\n        console.error( e );// eslint-disable-line\n      }\n\n      new upl.createUploader(upl_element_options);\n\n     }); // end document.querySelectorAll(fupl_selector).forEach\n  }; // end upl.init\n\n  return upl;\n\n})(FileUploader2 || {});\n\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  upl.createUploader = (fupl_options) => {\n\n    //debug\n    if( fupl_options.debug ) {\n      /* eslint-disable */\n      console.groupCollapsed('FileUploader options');\n      // creazione di un oggetto bidimensinale per\n      // semplificare la rappresentazione in tabella\n      let c_options = {},\n      c_keys = Object.keys(fupl_options);\n      c_keys.sort();\n      c_keys.forEach(item => {\n        let _toStringify = typeof fupl_options[item] === 'object' &&\n        fupl_options[item] !== null &&\n          item !== 'element';\n        c_options[item] = _toStringify ? JSON.stringify(fupl_options[item], null, ' ') : fupl_options[item];\n      });\n      console.table(c_options);\n      console.log(fupl_options);\n      console.groupEnd();\n      /* eslint-enable */\n    } // end if debug\n\n    // rilevamento eventuali elementi label e input\n    let _label = fupl_options.element.querySelector('label'),\n    _input = fupl_options.element.querySelector('input[type=\"file\"]');\n\n    // testo label (da tag o parametro label_text)\n    if( !fupl_options.label_text && _label) {\n      fupl_options.label_text = _label.innerHTML;\n    }\n    // caso in cui sia presente nessun valore\n    if (!fupl_options.label_text) {\n      fupl_options.label_text = '__label non presente__';\n    }\n\n    // eliminazione di tutti gli elementi contenuti nell'elemento uplaoder\n    fupl_options.element.innerHTML = '';\n\n    // aggiunta della classe principale\n    fupl_options.element.classList.add(\"file-uploader\");\n\n    // aggiunta eventuale classe personale\n    if( fupl_options.element_class ) {\n      fupl_options.element.classList.add( fupl_options.element_class );\n    }\n\n    // aggiunta label\n    if( fupl_options.add_label ) {\n      fupl_options.element.insertAdjacentHTML('beforebegin',\n        '<div class=\"file-uploader-label\">' +\n          '<label' + (fupl_options.required? ' class=\"required\"' : '') + '>' +\n            fupl_options.label_text +\n          '</label>' +\n        '</div>'\n      );\n      fupl_options.element.classList.add( 'has-file-uploader-label' );\n    }\n\n    // aggiunta template uploader\n\n\n    // aggiunta valori\n\n\n    // esecuzione init_callback, se presente\n    if( fupl_options.init_callback !== null ) {\n      fupl_options.init_callback( fupl_options );\n    }\n\n\n  }; // end upl.createUploader\n\n  return upl;\n\n})(FileUploader2 || {});\n\n\n\n  // //         // aggiunta template\n  // //         var original_html = fupl_options.element.html();\n  // //         fupl_options.element.html( fupl_options.template );\n\n  // //         fupl_options.element.find('.fileupl__button').html( original_html ); //ripristino markup originale\n\n  // //         // se esiste fupl_options.label_class, la classe viene aggiunta\n  // //         if( fupl_options.label_class ) {\n  // //           _label.addClass( fupl_options.label_class  );\n  // //         }\n\n  // //         // aggiunta del testo info per il drag & drop\n  // //         fupl_options.element.find('.fileupl__dd_text').html( fupl_options.is_multiple ? fupl_options.dd_text_multiple : fupl_options.dd_text_single );\n\n  // //         // aggiunta testo info file\n  // //         fupl_options.element.find('.fileupl__info_text')\n  // //         .html(\n  // //           (fupl_options.show_info_text ? upl.create_info_text(fupl_options) : '') +\n  // //           ((fupl_options.show_info_text && fupl_options.custom_info_text)? '<br>' : '') +\n  // //           (fupl_options.custom_info_text ? fupl_options.custom_info_text : '')\n  // //         );\n\n\n  // //         // !DRAG&DROP\n  // //         fupl_options.element\n  // //         .on( 'drag dragstart dragend dragover dragenter dragleave drop', function( e ) {\n  // //           e.preventDefault();\n  // //           e.stopPropagation();\n  // //         })\n  // //         .on( 'dragover dragenter', function() {\n  // //           fupl_options.element.addClass( fupl_options.element_dragover_class );\n  // //         })\n  // //         .on( 'dragleave dragend drop', function() {\n  // //           fupl_options.element.removeClass( fupl_options.element_dragover_class );\n  // //         })\n  // //         .on( 'drop', function( e ) {\n  // //           var err = false;\n  // //           if( !fupl_options.is_multiple && e.originalEvent.dataTransfer.files.length > 1 ) {\n\n  // //             fupl_options.alertErrorAPI('Puoi selezionare un solo file!');\n  // //             err = true;\n  // //           }\n\n  // //           if(!err) {\n  // //             upl.sendFiles( e.originalEvent.dataTransfer.files, fupl_options ); // filelist\n  // //           }\n  // //         });\n\n  // // //TODO fumoso, da riscrivere\n  // // //TODO correggere selector, possibilità non abbia id\n  // //         // !selezione tramite input\n  // //         var input_selector = '#' + _input.attr('id');\n  // //         $(document).on('change', input_selector, function () {\n  // //           upl.sendFiles( document.querySelector(input_selector).files, fupl_options ); // filelist\n  // //         });\n\n\n  //       } catch(e) { //throw \"error\"\n  //         console.error( e );// eslint-disable-line\n  //       } // finally {}\n\n  //     }); // end document.querySelectorAll(upl.global_options.selector).forEach\n\n  //   }; // end init\n\n  //   return upl;\n\n  // })(FileUploader2 || {});\n","/* globals FileUploader2:true */\n\nFileUploader2 = ( (upl) => {\n  \"use strict\";\n\n  // parametri di default condivisi da tutte le istanze\n  const default_options = {\n\n    // percorso del css FileUploader\n    css: null,\n\n    // Attiva la modalità debug che mostra in console le informazioni\n    // sulla configurazione corrente\n    debug: false,\n\n    // locales string, usata per la formattazione della stringa numerica\n    // mostrata all'utente ricavata da `max_filesize`\n    locales: 'it-IT',\n\n    // messaggio browser non compatibile\n    unsuitableBrowserMessage: 'Il tuo browser non ha tutte le funzionalità richieste da FileUploader',\n\n    // Interfaccia per l'invio di messaggi di errore\n    alert_api: (mes) => { window.alert(mes);},\n\n    // Url dello script lato server che esegue il caricamento del file\n    // per l'istanza in esame. Ha la precedenza sull'impostazione globale\n    // obbligatorio\n    url: null,\n\n    // Tipologia dei file selezionabili\n    // il valore deve corrispondere ad una delle chievi dell'array `mimetypes`\n    filetype: 'auto',\n\n    /*\n    Stringa di estensioni o mimetypes separati da virgola accettabili per l'uploader\n    corrente in aggiunta o sostituzione di quanto impostato tramite il parametro `filetype`.\n\n    L'eventuale attributo `accept` del campo input contenuto\n    nel contenitore uploader (se presente), svolge la stessa funzione.\n\n    In entrambi i casi, i valori sono presi in considerazione solo se `filetype == 'auto'`\n\n    In presenza sia del parametro che dell'attributo `accept`, viene effettuato un merge,\n    e l'attributo ha la precedenza sul parametro.\n    Se il parametro è `null` e l'attributo `accept` non è presente,\n    con `filetype == auto` vengono accettati tutti i tipi di file.\n    */\n    accept: null,\n\n    /*\n    Parametro multiple.\n    Attiva la possibilità di acquisire più file con lo stesso uploader.\n    L'attivazione di questa opzione può essere effettuata anche tramite il parametro\n    del campo `input` /se presente)\n    */\n    multiple: false,\n\n    /*\n    Parametro required.\n    Eventuale impostazione del campo come obbligatorio.\n    L'attivazione di questa opzione può essere effettuata anche tramite il parametro\n    del campo `input` /se presente)\n    */\n    required: false,\n\n    /*\n    Template del markup da inserire all'interno dell'elemento contenitore,\n    così strutturato:\n\n    * Il markup originale viene inserito all'interno dell'elemento .file_upl__button\n    * Il testo info per drag&drop viene inserito all'interno dell'elemento .file_upl__dd_text\n    * Il testo di info viene inserito all'interno dell'elemento .file_upl__info_text.\n      Se show_info_text = false, questo elemento può essere omesso.\n\n    NB: È possibile variare il markup secondo necessità,\n    ma è necessario che le classi .file_upl__* siano mantenute.\n    */\n    template: '<div class=\"card text-center\" style=\"background-color: transparent\">' +\n        '<div class=\"card-body\">' +\n          '<div class=\"file_upl__button\"></div>' +\n          '<div class=\"file_upl__dd_text\"></div>' +\n        '</div>' +\n        '<div class=\"card-footer text-muted small font-italic file_upl__info_text\"></div>' +\n      '</div>',\n\n\n    // Funzione richiamata dopo l'inizializzazione di ogni elemento FileUploader.\n    // La funzione viene invocata con l'oggetto di tutte le opzioni come argomento\n    init_callback: null,\n\n    /*\n    Funzione richiamata ogni volta che un file viene inviato al server.\n    La funzione viene invocata passandole un oggetto contenente:\n      * `item_id`: id univoco del documento in elaborazione\n      * `filelist_item`: oggetto filelist corrente,\n      * `img_preview` : miniatura dell'immagine in forma di stringa Base64\n        (null se si tratta di altre tipologie)\n      * `uploader_options`: oggetto `options` corrente\n      * `img_wi` e `img_he`: dimensioni in pixel dell'immagine.\n        null se non si tratta di immagini\n    */\n    upload_start_callback: null,\n\n    /*\n    Funzione richiamata ogni volta che un file viene caricato.\n    La funzione viene invocata passandole un oggetto contenente:\n      * `item_id`: id univoco del documento in elaborazione,\n      * `server_error`: null, se l'upload è stato completato correttamente oppure,\n        in caso contrario, stringa con il messaggio di errore restituito\n      * `filelist_item`: oggetto filelist corrente,\n      * `hidden_fields`: stringa con i campi hidden da inviare al server\n      * `uploader_options`: oggetto `options` corrente\n      * `img_wi` e img_he: dimensioni in pixel dell'immagine.\n        null se non si tratta di immagini\n    */\n    upload_complete_callback: null,\n\n    // Eventuale classe da aggiungere all'elemento FileUploader al\n    // momento dell'inizializzazione\n    element_class: null,\n\n    // Eventuale classe da aggiungere all'elemento FileUploader quando un file\n    // vi è trascinato sopra\n    element_dragover_class: null,\n\n    // Label da applicare da applicare all'elemento FileUploader.\n    // Se `null` e se esiste un elemento `label` all'interno dell'uploader,\n    // viene preso il testo dell'elemento\n    label_text: null,\n\n    // Opzione per l'aggiunta di un tag label prima dell'elemento uploader\n    add_label: true,\n\n    // classi da applicare al tag label utilizzato come pulsante per la selezione dei file\n    label_btn_class: 'btn btn-primary btn-lg',\n\n    // Testo di istruzioni per il drag and drop con input senza attributo `multiple`\n    dd_text_single: 'oppure trascina qui un file',\n\n    // Testo di istruzioni per il drag and drop  con input `multiple`\n    dd_text_multiple: 'oppure trascina qui uno o più file',\n\n    // indica se mostrare o no il testo informativo su formati accettati,\n    // dimensioni immagini, ecc. Se si decide di non mostralo, potrebbe essere\n    // necessario rimuovere dal template l'elemento .file_upl__info_text\n    show_info_text: true,\n\n    // Eventuale testo informativo personalizzato. se presente,\n    // sostituisce il testo generato in base ai formati, ai limiti di dimensioni, ecc.\n    custom_info_text: null,\n\n    // Stringa utilizzata per concatenare tra loro le varie parti del testo informativo\n    info_text_join_string: '<br>',\n\n    /*\n    impostazioni per le immagini.\n    Applicate solo se filetype == 'img'.\n    Valori numerici che corrispondono alle dimensioni in pixel richieste per l'immagine.\n    I parametri img_min_* e img_max_* possono essere assegnati simultaneamente,\n    ma sono ignorati se esistono i corrispondenti parametri esatti (ad esempio,\n    se è presente img_w, i parametri img_min_w e img_max_w non vengono presi in considerazione).\n    Il valore di default di tutti i parametri è null, che significa che non vengono applicati.\n\n      * `img_min_w`: larghezza minima dell'immagine\n      * `img_max_w`: larghezza massima dell'immagine\n      * `img_w`: larghezza esatta dell'immagine\n      * `img_min_h`: altezza minima dell'immagine\n      * `img_max_h`: altezza massima dell'immagine\n      * `img_h`: altezza esatta dell'immagine\n    */\n    img_min_w   : null,\n    img_max_w   : null,\n    img_w       : null,\n    img_min_h   : null,\n    img_max_h   : null,\n    img_h       : null,\n\n    /*\n    Dimensione (peso) massima dell'immagine. Può essere un numero,\n    e in questo caso corrisponde ad una dimensione in KB, o una stringa\n    composta da un valore numerico e da un suffisso tra ‘KB’ e ‘MB’ (anche minuscoli).\n    Se il valore è null o se la stringa non viene riconosciuta,\n    non è applicato nessun limite.\n    */\n    max_filesize: null,\n\n    // Prefisso della variabile utilizzata per inviare al server i dati\n    // di ogni singolo file caricato. Il valore indicato è il nome base dell'array\n    // costruito per inviare i valori al server.\n    varname: 'file',\n\n    /*\n    Array degli eventuali elementi preregistrati, nella forma:\n      [\n        {\n\n        }\n        [...]\n      ]\n    */\n    values: []\n  };\n\n  upl.setOptions = (...custom_options) => {\n\n    if( typeof Object.assign === \"function\") {\n      return Object.assign(\n        {},\n        default_options,\n        ...custom_options\n      );\n\n    } else { // IE 11\n      let opts = {};\n      for(let i in default_options) {\n        opts[i] = default_options[i];\n        custom_options.forEach( item => {\n          if(item[i] !== undefined) {\n            opts[i] = item[i];\n          }\n        });\n      }\n      return opts;\n    }\n  };\n\n  return upl;\n\n})(FileUploader2 || {});\n"]}