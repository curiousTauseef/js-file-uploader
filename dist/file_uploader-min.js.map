{"version":3,"sources":["../js/file_uploader.js","../js/_init.js","../js/_uploader.js","../js/_set_options.js"],"names":["FileUploader2","upl","fupl_selector_data_name","isSuitableBrowser","div","document","createElement","window","parse_max_filesize","filesize_value","maxbytes","unit","feedback_size","isNaN","substr","toUpperCase","length","Math","round","toLocaleString","options","locales","init","user_global_options","global_options","setOptions","css","head","insertAdjacentHTML","querySelectorAll","forEach","upl_element","file_uploader_data","dataset","JSON","parse","element","uploader_url","Error","filetype","toLowerCase","Object","keys","mimetypes","indexOf","_input","attr","accept","split","map","item","trim","e","console","error","uploader","alert","unsuitableBrowserMessage","debug","groupCollapsed","table","log","groupEnd","default_options","alert_api","mes","url","auto","img","pdf","container_class","template","init_callback","upload_start_callback","upload_complete_callback","container_dragover_class","label_text","label_class","dd_text_single","dd_text_multiple","show_info_text","custom_info_text","info_text_join_string","img_min_w","img_max_w","img_w","img_min_h","img_max_h","img_h","max_filesize","varname","_len","arguments","custom_options","Array","_key","assign","apply","concat","_ret","opts","_loop","i","undefined","v","_typeof"],"mappings":"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","sourcesContent":["/*!\n *\n * FileUploader 2.0\n * HTML5 / JS Async Uploader\n * Massimo Cassandro 2017-2019\n *\n */\n\n/* eslint no-console: 0, no-unused-vars: 0, no-empty:  0 */\n/* exported FileUploader2 */\n\n/*\n@codekit-append '_set_options.js'\n@codekit-append '_uploader.js'\n\n@codekit-append '_init.js'\n\n*/\n\nvar FileUploader2 = (() => {\n  \"use strict\";\n  let upl = {};\n\n  return upl;\n})();\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  // VARIABILI E METODI PRIVATI\n\n  // nome dell'attributo data da usare come selettore degli elementi su cui applicare FileUploader.\n  const fupl_selector_data_name = 'file_uploader2',\n\n  /*\n    isSuitableBrowser\n    Verifica che il browser sia in grado di gestire le funzionalità richieste.\n    Restituisce `true` o `false`\n  */\n  isSuitableBrowser = () => {\n    var div = document.createElement( 'div' );\n    return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) )\n      && 'FormData' in window\n      && 'FileReader' in window;\n  },\n\n  /*\n   parse_max_filesize\n   elabora il parametro `filesize_value` (se esiste) e restituisce:\n    - `null` se `filesize_value` === null`\n    - `false` se `filesize_value` non è un valore corretto\n    - l'oggetto `{ maxbytes: 123456, unit: 'KB', feedback_size: ''}`\n    in cui:\n      - `maxbytes` è il valore in bytes del limite imposto\n      - `unit` è uno tra 'KB' e 'MB'\n      - `feedback_size` è la rappresentazione per un eventuale feedback per l'utente\n  */\n  parse_max_filesize = (filesize_value) =>  {\n    // controllo max_filesize ed elaborazione parametro\n    if( filesize_value ) {\n      var maxbytes, unit, feedback_size;\n\n      if(!isNaN(filesize_value)) { //solo numero, si assume siano KB\n        maxbytes = +filesize_value;\n        unit = 'KB';\n        feedback_size = filesize_value;\n\n      } else {\n\n        unit = filesize_value.substr(-2, 2).toUpperCase();\n        maxbytes = +filesize_value.substr(0, filesize_value.length-2);\n        feedback_size = maxbytes;\n\n        if(isNaN(maxbytes) || (unit !== 'KB' && unit !== 'MB') ) {\n          return false;\n        }\n      }\n\n      // se l'unità è indicata in KB ma il valore è più grande\n      // di un MB, il parametro viene aggiornato\n      if( maxbytes >= 1024 && unit === 'KB') {\n        unit = 'MB';\n        feedback_size = (Math.round((maxbytes / 1024) * 100) /100);\n      }\n\n      if(unit === 'KB') {\n        maxbytes = maxbytes * 1024;\n      } else {\n        maxbytes = maxbytes * 1024 * 1024;\n      }\n\n      return {\n        //'original_value': filesize_value,\n        //'unit'         : unit,\n        'maxbytes'     : maxbytes,\n        'feedback_size': feedback_size.toLocaleString(upl.options.locales) + '&nbsp;' + unit\n      };\n\n    } else {\n      return null;\n    }\n  };\n\n\n  /*\n    init\n    Seleziona gli elementi con l'attributo `fupl_selector` e avvia FileUploader\n  */\n  upl.init = (user_global_options) => {\n\n    const global_options = upl.setOptions(user_global_options);\n\n    // verifica che il browser sia compatibile\n    if( !isSuitableBrowser() ) {\n      alert(global_options.unsuitableBrowserMessage);\n      return;\n    }\n\n    // caricamento CSS\n    if(global_options.css) {\n      document.head.insertAdjacentHTML('beforeend',\n        '<link rel=\"stylesheet\" href=\"' + global_options.css + '\" type=\"text/css\" media=\"all\">'\n      );\n    }\n\n    // istanze uploader\n    document.querySelectorAll('[data-' + fupl_selector_data_name + ']').forEach( upl_element => {\n\n      /*\n        merge dei parametri inseriti tramite attributi `data`, in cui:\n\n        * `upl_element.dataset`:\n            tutti gli attributi inseriti singolarmente (es. data-filetype=\"img\")\n\n        * `upl_element.dataset[fupl_selector_data_name]`:\n            attributi inseriti tramite json assegnato a `data- + 'fupl_selector_data_name'`\n            (es data-file_uploader2='{\"filetype\":\"img\"}')\n\n        In caso di conflitto prevalgono gli ultimi\n      */\n\n      let file_uploader_data = upl_element.dataset[fupl_selector_data_name];\n\n      if(file_uploader_data === '') {\n        file_uploader_data = {};\n      } else {\n        file_uploader_data = JSON.parse(file_uploader_data);\n      }\n\n      file_uploader_data = upl.setOptions(\n        {},\n        global_options,\n        upl_element.dataset,\n        file_uploader_data\n      );\n\n      // cancella la chiave `fupl_selector_data_name` al solo scopo di ridurre la confusione\n      delete file_uploader_data[fupl_selector_data_name];\n\n      // aggiunta dell'elemento stesso ad  `istance_options`:\n      file_uploader_data.element = upl_element;\n\n      // controllo parametri e avvio uploader\n      try {\n\n        //  url\n        if( !file_uploader_data.uploader_url ) {\n          throw new Error( \"Parametro `url` non impostato\" );\n        }\n\n        //  parametro filetype\n        file_uploader_data.filetype = file_uploader_data.filetype.toLowerCase();\n        if( Object.keys(file_uploader_data.mimetypes).indexOf(file_uploader_data.filetype) === -1 ) {\n\n          throw new Error( \"Parametro `filetype` non corretto\" );\n        } else {\n          // implementazione eventuali parametro/attributo `accept`\n          if( file_uploader_data.filetype === 'auto' ) {\n\n\n            if( _input.attr('accept')) {\n              file_uploader_data.accept = _input.attr('accept').split(',').map(function (item) { return item.trim(); });\n            }\n          } else {\n            file_uploader_data.accept = upl.mimetypes[file_uploader_data.filetype];\n          }\n\n        }\n\n\n\n\n\n\n\n  //         var max_filesize = parse_max_filesize(file_uploader_data);\n  //         if( max_filesize === false ) {\n  //           throw new Error( '\"' + file_uploader_data.max_filesize + '\" non è un valore corretto per `max_filesize`');\n  //         } else {\n  //           file_uploader_data.max_filesize = max_filesize;\n  //         }\n\n\n\n      } catch(e) {\n        console.error( e );// eslint-disable-line\n      }\n\n      new upl.uploader(upl_element);\n\n     }); // end document.querySelectorAll(fupl_selector).forEach\n  }; // end upl.init\n\n  return upl;\n\n})(FileUploader2 || {});\n\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n\n\n  upl.uploader = (options) => {\n    //debug\n    if( options.debug ) {\n      /* eslint-disable */\n      console.groupCollapsed('FileUploader options');\n      console.table(options);\n      console.log(options);\n      console.groupEnd();\n      /* eslint-enable */\n    }\n  };\n\n  return upl;\n\n})(FileUploader2 || {});\n\n\n\n\n\n\n\n\n\n\n  //\n\n\n  //       try {\n  //\n\n  //         //         //!SETUP\n  // //         // aggiunta riferimento container ad upl.istance_options\n  // //         this_upl.istance_options.container = upl_el;\n\n  // //         // aggiunta della classe per l'attivazione delle regole css\n  // //         this_upl.istance_options.container.addClass('fileupl');\n  // //         // aggiunta classe personale\n  // //         if( this_upl.istance_options.container_class ) {\n  // //           this_upl.istance_options.container.addClass( this_upl.istance_options.container_class );\n  // //         }\n\n  // //         // rilevamento impostazioni ed elementi (prima di init_callback)\n  // //         var _label = this_upl.istance_options.container.find('label'),\n  // //           _input = this_upl.istance_options.container.find('input:file');\n\n  // //         this_upl.istance_options.is_multiple = _input.prop('multiple');\n\n  // //         // esecuzione init_callback, se presente\n  // //         if( this_upl.istance_options.init_callback !== null ) {\n  // //           this_upl.istance_options.init_callback( this_upl.istance_options );\n  // //         }\n\n  // //         // aggiunta template\n  // //         var original_html = this_upl.istance_options.container.html();\n  // //         this_upl.istance_options.container.html( this_upl.istance_options.template );\n\n  // //         this_upl.istance_options.container.find('.fileupl__button').html( original_html ); //ripristino markup originale\n\n\n\n  // //         // rilevamento attributo name e sua eliminazione ad evitare che sia inviato con il form\n  // //         this_upl.istance_options.input_name = _input.attr('name') || 'uploader_file[]';\n  // //         _input.removeAttr('name');\n\n  // //\n\n  // //         // se esiste this_upl.istance_options.label_text, il testo del tag label viene sostituito\n  // //         if( this_upl.istance_options.label_text ) {\n  // //           _label.text( this_upl.istance_options.label_text );\n  // //         }\n\n  // //         // se esiste this_upl.istance_options.label_class, la classe viene aggiunta\n  // //         if( this_upl.istance_options.label_class ) {\n  // //           _label.addClass( this_upl.istance_options.label_class  );\n  // //         }\n\n  // //         // aggiunta del testo info per il drag & drop\n  // //         this_upl.istance_options.container.find('.fileupl__dd_text').html( this_upl.istance_options.is_multiple ? this_upl.istance_options.dd_text_multiple : this_upl.istance_options.dd_text_single );\n\n  // //         // aggiunta testo info file\n  // //         this_upl.istance_options.container.find('.fileupl__info_text')\n  // //         .html(\n  // //           (this_upl.istance_options.show_info_text ? upl.create_info_text(this_upl.istance_options) : '') +\n  // //           ((this_upl.istance_options.show_info_text && this_upl.istance_options.custom_info_text)? '<br>' : '') +\n  // //           (this_upl.istance_options.custom_info_text ? this_upl.istance_options.custom_info_text : '')\n  // //         );\n\n\n  // //         // !DRAG&DROP\n  // //         this_upl.istance_options.container\n  // //         .on( 'drag dragstart dragend dragover dragenter dragleave drop', function( e ) {\n  // //           e.preventDefault();\n  // //           e.stopPropagation();\n  // //         })\n  // //         .on( 'dragover dragenter', function() {\n  // //           this_upl.istance_options.container.addClass( this_upl.istance_options.container_dragover_class );\n  // //         })\n  // //         .on( 'dragleave dragend drop', function() {\n  // //           this_upl.istance_options.container.removeClass( this_upl.istance_options.container_dragover_class );\n  // //         })\n  // //         .on( 'drop', function( e ) {\n  // //           var err = false;\n  // //           if( !this_upl.istance_options.is_multiple && e.originalEvent.dataTransfer.files.length > 1 ) {\n\n  // //             this_upl.istance_options.alertErrorAPI('Puoi selezionare un solo file!');\n  // //             err = true;\n  // //           }\n\n  // //           if(!err) {\n  // //             upl.sendFiles( e.originalEvent.dataTransfer.files, this_upl.istance_options ); // filelist\n  // //           }\n  // //         });\n\n  // // //TODO fumoso, da riscrivere\n  // // //TODO correggere selector, possibilità non abbia id\n  // //         // !selezione tramite input\n  // //         var input_selector = '#' + _input.attr('id');\n  // //         $(document).on('change', input_selector, function () {\n  // //           upl.sendFiles( document.querySelector(input_selector).files, this_upl.istance_options ); // filelist\n  // //         });\n\n\n  //       } catch(e) { //throw \"error\"\n  //         console.error( e );// eslint-disable-line\n  //       } // finally {}\n\n  //     }); // end document.querySelectorAll(upl.global_options.selector).forEach\n\n  //   }; // end init\n\n  //   return upl;\n\n  // })(FileUploader2 || {});\n","/* globals FileUploader2:true */\n\nFileUploader2 = ( (upl) => {\n  \"use strict\";\n\n  // parametri di default condivisi da tutte le istanze\n  const default_options = {\n\n    // percorso del css FileUploader\n    css: null,\n\n    // Attiva la modalità debug che mostra in console le informazioni\n    // sulla configurazione corrente\n    debug: false,\n\n    // locales string, usata per la formattazione della stringa numerica\n    // mostrata all'utente ricavata da `max_filesize`\n    locales: 'it-IT',\n\n    // messaggio browser non compatibile\n    unsuitableBrowserMessage: 'Il tuo browser non ha tutte le funzionalità richieste da FileUploader',\n\n    // Interfaccia per l'invio di messaggi di errore\n    alert_api: (mes) => { window.alert(mes);},\n\n    // Url dello script lato server che esegue il caricamento del file\n    // per l'istanza in esame. Ha la precedenza sull'impostazione globale\n    // obbligatorio\n    url: null,\n\n    // mimetypes ed estensioni da utilizzare per l'attributo `accept` del\n    // tag input in corrispondenza del parametro `filetype`\n    // `auto` → tutti i tipi di file (salvo eventuali limitazioni\n    // tramite parametro e attributo `accept`)\n    mimetypes: {\n      auto : null,\n      img  : ['image/png', 'image/jpeg', 'image/pjpeg', 'image/gif', 'image/webp',\n              '.png', '.jpg', '.jpeg', '.pjpg', '.pjpeg', '.gif', '.webp'],\n      pdf  : ['application/pdf', '.pdf']\n    },\n\n    // Tipologia dei file selezionabili\n    // il valore deve corrispondere ad una delle chievi dell'array `mimetypes`\n    filetype: 'auto',\n\n    /*\n    eventuale array di estensioni o mimetypes accettabili per l'uploader\n    corrente in aggiunta o sostituzione di quanto impostato tramite il parametro `filetype`.\n\n    L'eventuale attributo `accept` del campo input contenuto\n    nel contenitore uploader (se presente), svolge la stessa funzione.\n\n    In entrambi i casi, i valori sono presi in considerazione solo se `filetype == 'auto'`\n\n    In presenza sia del parametro che dell'attributo `accept`, viene effettuato un merge,\n    e l'attributo ha la precedenza sul parametro\n    */\n    accept: null,\n\n    // Eventuale classe da aggiungere all'elemento contenitore di FileUploader\n    container_class: null,\n\n    /*\n    Template del markup da inserire all'interno dell'elemento contenitore,\n    così strutturato:\n\n    * Il markup originale viene inserito all'interno dell'elemento .file_upl__button\n    * Il testo info per drag&drop viene inserito all'interno dell'elemento .file_upl__dd_text\n    * Il testo di info viene inserito all'interno dell'elemento .file_upl__info_text.\n      Se show_info_text = false, questo elemento può essere omesso.\n\n    NB: È possibile variare il markup secondo necessità,\n    ma è necessario che le classi .file_upl__* siano mantenute.\n    */\n    template: '<div class=\"card text-center\" style=\"background-color: transparent\">' +\n        '<div class=\"card-body\">' +\n          '<div class=\"file_upl__button\"></div>' +\n          '<div class=\"file_upl__dd_text\"></div>' +\n        '</div>' +\n        '<div class=\"card-footer text-muted small font-italic file_upl__info_text\"></div>' +\n      '</div>',\n\n    // Funzione richiamata ogni volta che un elemento FileUploader viene inizializzato.\n    // La funzione viene invocata con l'elemento in esame come argomento\n    init_callback: null,\n\n    /*\n    Funzione richiamata ogni volta che un file viene inviato al server.\n    La funzione viene invocata passandole un oggetto contenente:\n      * `item_id`: id univoco del documento in elaborazione\n      * `filelist_item`: oggetto filelist corrente,\n      * `img_preview` : miniatura dell'immagine in forma di stringa Base64\n        (null se si tratta di altre tipologie)\n      * `uploader_options`: oggetto `options` corrente\n      * `img_wi` e `img_he`: dimensioni in pixel dell'immagine.\n        null se non si tratta di immagini\n    */\n    upload_start_callback: null,\n\n    /*\n    Funzione richiamata ogni volta che un file viene caricato.\n    La funzione viene invocata passandole un oggetto contenente:\n      * `item_id`: id univoco del documento in elaborazione,\n      * `server_error`: null, se l'upload è stato completato correttamente oppure,\n        in caso contrario, stringa con il messaggio di errore restituito\n      * `filelist_item`: oggetto filelist corrente,\n      * `hidden_fields`: stringa con i campi hidden da inviare al server\n      * `uploader_options`: oggetto `options` corrente\n      * `img_wi` e img_he: dimensioni in pixel dell'immagine.\n        null se non si tratta di immagini\n    */\n    upload_complete_callback: null,\n\n    // Eventuale classe da aggiungere all'elemento contenitore quando un file\n    // vi è trascinato sopra\n    container_dragover_class: null,\n\n    // Eventuale testo da sostituire a quello contenuto nel tag label\n    // (null = nessuna sostituzione).\n    label_text: null,\n\n    // Eventuale classe da applicare al tag label\n    label_class: 'btn btn-primary btn-lg',\n\n    // Testo di istruzioni per il drag and drop con input senza attributo `multiple`\n    dd_text_single: 'oppure trascina qui un file',\n\n    // Testo di istruzioni per il drag and drop  con input `multiple`\n    dd_text_multiple: 'oppure trascina qui uno o più file',\n\n    // indica se mostrare o no il testo informativo su formati accettati,\n    // dimensioni immagini, ecc. Se si decide di non mostralo, potrebbe essere\n    // necessario rimuovere dal template l'elemento .file_upl__info_text\n    show_info_text: true,\n\n    // Eventuale testo informativo personalizzato. se presente,\n    // sostituisce il testo generato in base ai formati, ai limiti di dimensioni, ecc.\n    custom_info_text: null,\n\n    // Stringa utilizzata per concatenare tra loro le varie parti del testo informativo\n    info_text_join_string: '<br>',\n\n    /*\n    impostazioni per le immagini.\n    Applicate solo se filetype == 'img'.\n    Valori numerici che corrispondono alle dimensioni in pixel richieste per l'immagine.\n    I parametri img_min_* e img_max_* possono essere assegnati simultaneamente,\n    ma sono ignorati se esistono i corrispondenti parametri esatti (ad esempio,\n    se è presente img_w, i parametri img_min_w e img_max_w non vengono presi in considerazione).\n    Il valore di default di tutti i parametri è null, che significa che non vengono applicati.\n\n      * `img_min_w`: larghezza minima dell'immagine\n      * `img_max_w`: larghezza massima dell'immagine\n      * `img_w`: larghezza esatta dell'immagine\n      * `img_min_h`: altezza minima dell'immagine\n      * `img_max_h`: altezza massima dell'immagine\n      * `img_h`: altezza esatta dell'immagine\n    */\n    img_min_w   : null,\n    img_max_w   : null,\n    img_w       : null,\n    img_min_h   : null,\n    img_max_h   : null,\n    img_h       : null,\n\n    /*\n    Dimensione (peso) massima dell'immagine. Può essere un numero,\n    e in questo caso corrisponde ad una dimensione in KB, o una stringa\n    composta da un valore numerico e da un suffisso tra ‘KB’ e ‘MB’ (anche minuscoli).\n    Se il valore è null o se la stringa non viene riconosciuta,\n    non è applicato nessun limite.\n    */\n    max_filesize: null,\n\n    // Prefisso della variabile utilizzata per inviare al server i dati\n    // di ogni singolo file caricato. Il valore indicato è il nome base dell'array\n    // costruito per inviare i valori al server.\n    varname: 'file'\n  };\n\n  upl.setOptions = (...custom_options) => {\n\n    if( typeof Object.assign === \"function\") {\n      return Object.assign(\n        {},\n        default_options,\n        ...custom_options\n      );\n\n    } else { // IE 11\n      let opts = {};\n      for(let i in default_options) {\n        opts[i] = default_options[i];\n        custom_options.forEach( item => {\n          if(item[i] !== undefined) {\n            opts[i] = item[i];\n          }\n        });\n      }\n      return opts;\n    }\n  };\n\n  return upl;\n\n})(FileUploader2 || {});\n"]}