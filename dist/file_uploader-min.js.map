{"version":3,"sources":["../js/file_uploader.js","../js/_init.js","../js/_create_uploader.js","../js/_create_item.js","../js/_create_info_text.js","../js/_set_options.js","../js/_utility_funcs.js"],"names":["FileUploader2","upl","fupl_selector_data_name","isSuitableBrowser","div","document","createElement","window","init","user_global_options","global_options","setOptions","css","head","insertAdjacentHTML","querySelectorAll","forEach","upl_element","element_all_dataset","dataset","fupl_dataset","fupl_options","JSON","parse","element","url","Error","filetype","toLowerCase","Object","keys","mimetypes","indexOf","json_params","item","e","console","error","createUploader","alert","unsuitableBrowserMessage","_input","querySelector","original_label","accept_attr","accept_params","accept","split","map","trim","getAttribute","_toConsumableArray","Set","concat","max_filesize","parse_max_filesize","locales","multiple","Boolean","hasAttribute","required","_type","_mode","uploader_label_text","innerHTML","classList","add","wrapper","_fupl_options$element","_fupl_options$istance","parentNode","insertBefore","appendChild","element_class","apply","uploader_add_label","_class","uploader_label_class","push","length","join","templates","main","istance_input","istance_label","istance_dd_text","istance_info_text","istance_result_wrapper","setAttribute","input_text","input_label_class","show_info_text","custom_info_text","create_info_text","values","createItem","init_callback","debug","groupCollapsed","c_options","c_keys","sort","_toStringify","_typeof","stringify","table","log","groupEnd","item_array","info_text","img_w","img_h","img_min_w","img_min_h","img_max_w","img_max_h","feedback_size","str","info_text_join_string","charAt","toUpperCase","slice","info_text_wrap_string","default_options","alert_api","mes","no_file","remove_btn","single_img","multiple_imgs","single_doc","multiple_docs","no_img_text","no_doc_text","element_dragover_class","img","single","doc","varname","upload_start_callback","upload_complete_callback","delete_varname","reorder","reorder_varname","_len","arguments","custom_options","Array","_key","assign","_ret","opts","_loop","i","undefined","v","auto","pdf","filesize_value","maxbytes","unit","isNaN","substr","Math","round","Number","isInteger","toFixed","toLocaleString"],"mappings":"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","sourcesContent":["/*!@preserve\n *\n * FileUploader 2.0\n * HTML5 / JS Async Uploader\n * Massimo Cassandro 2017-2019\n *\n */\n\n/* eslint no-console: 0, no-unused-vars: 0, no-empty:  0 */\n/* exported FileUploader2 */\n\n/*\n@codekit-append '_utility_funcs.js'\n@codekit-append '_set_options.js'\n@codekit-append '_create_info_text.js'\n@codekit-append '_create_item.js'\n@codekit-append '_create_uploader.js'\n\n@codekit-append '_init.js'\n\n*/\n\nvar FileUploader2 = (() => {\n  \"use strict\";\n  let upl = {};\n\n  return upl;\n})();\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  // VARIABILI E METODI PRIVATI\n  // nome dell'attributo data da usare come selettore degli elementi su cui applicare FileUploader.\n  const fupl_selector_data_name = 'file_uploader2',\n\n  /*\n    isSuitableBrowser\n    Verifica che il browser sia in grado di gestire le funzionalità richieste.\n    Restituisce `true` o `false`\n  */\n  isSuitableBrowser = () => {\n    var div = document.createElement( 'div' );\n    return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) )\n      && 'FormData' in window\n      && 'FileReader' in window;\n  };\n\n\n  /*\n    init\n    Seleziona gli elementi con l'attributo `fupl_selector` e avvia FileUploader\n    `user_global_options` è l'oggetto istanziato al momento di avviare FileUploader2,\n    ha la stessa struttiura di `default_options` (definito in _set_options.js)\n    e può sovrascrivere ogni suo elemento\n  */\n  upl.init = (user_global_options) => {\n\n    const global_options = upl.setOptions(user_global_options);\n\n    // verifica che il browser sia compatibile\n    if( !isSuitableBrowser() ) {\n      alert(global_options.unsuitableBrowserMessage);\n      return;\n    }\n\n    // caricamento CSS\n    if(global_options.css) {\n      document.head.insertAdjacentHTML('beforeend',\n        '<link rel=\"stylesheet\" href=\"' + global_options.css + '\" type=\"text/css\" media=\"all\">'\n      );\n    }\n\n    // istanze uploader\n    document.querySelectorAll('[data-' + fupl_selector_data_name + ']').forEach( upl_element => {\n\n      /*\n        merge dei parametri inseriti tramite attributi `data`, in cui:\n\n        * `upl_element.dataset`:\n            tutti gli attributi inseriti singolarmente (es. data-filetype=\"img\")\n\n        * `upl_element.dataset[fupl_selector_data_name]`:\n            attributi inseriti tramite json assegnato a `data- + 'fupl_selector_data_name'`\n            (es data-file_uploader2='{\"filetype\":\"img\"}')\n\n        In caso di conflitto prevalgono gli ultimi\n      */\n\n      let element_all_dataset = upl_element.dataset,\n      fupl_dataset = upl_element.dataset[fupl_selector_data_name],\n      fupl_options = {};\n\n      if(element_all_dataset === '') {\n        element_all_dataset = {};\n      }\n\n      if(fupl_dataset === '') {\n        fupl_dataset = {};\n      } else {\n        fupl_dataset = JSON.parse(fupl_dataset);\n      }\n\n      fupl_options = upl.setOptions(\n        global_options,\n        fupl_dataset,\n        element_all_dataset\n      );\n\n      // cancella la chiave `fupl_selector_data_name`\n      // (al solo scopo di ridurre la confusione)\n      delete fupl_options[fupl_selector_data_name];\n\n      // aggiunta dell'elemento stesso ad  `fupl_options`:\n      fupl_options.element = upl_element;\n\n      // controllo parametri e avvio uploader\n      try {\n        //  controllo url\n        if( !fupl_options.url ) {\n          throw new Error( \"Parametro `url` non impostato\" );\n        }\n\n        //  controllo parametro filetype\n        fupl_options.filetype = fupl_options.filetype.toLowerCase();\n        if( Object.keys(upl.mimetypes).indexOf(fupl_options.filetype) === -1 ) {\n          throw new Error( \"Parametro `filetype` non corretto\" );\n        }\n\n        // parametri che devono essere array e che potrebbero essere presenti\n        // come attributi data (stringa)\n        const json_params = [\n          'input_text',\n          'templates',\n          'info_text_wrap_string',\n          'values'\n        ];\n        json_params.forEach(item => {\n          if(typeof fupl_options[item] === 'string' ) {\n            fupl_options[item] = JSON.parse(fupl_options[item]);\n          }\n        });\n\n\n      } catch(e) {\n        console.error( e );// eslint-disable-line\n      }\n\n      new upl.createUploader(fupl_options);\n\n     }); // end document.querySelectorAll(fupl_selector).forEach\n  }; // end upl.init\n\n  return upl;\n\n})(FileUploader2 || {});\n\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  upl.createUploader = (fupl_options) => {\n\n    // eventuale campo input e relativo tag label\n    let _input = fupl_options.element.querySelector('input[type=\"file\"]'),\n      original_label = fupl_options.element.querySelector('label');\n\n\n    // implementazione eventuali parametro/attributo `accept`\n    if( fupl_options.filetype === 'auto' ) {\n\n      let accept_attr = [],\n      accept_params = [];\n\n      if( fupl_options.accept !== null ) {\n        accept_params = fupl_options.accept\n          .split(',').map( item => item.trim() );\n      }\n\n      if(_input && _input.getAttribute('accept') ) {\n        accept_attr = _input.getAttribute('accept')\n          .split(',').map( item => item.trim() );\n      }\n\n      // https://www.peterbe.com/plog/merge-two-arrays-without-duplicates-in-javascript\n      fupl_options.accept = [...new Set([...accept_params, ...accept_attr])];\n\n    } else {\n      fupl_options.accept = upl.mimetypes[fupl_options.filetype];\n    }\n\n    // elaborazione max_filesize\n    let max_filesize = upl.parse_max_filesize(fupl_options.max_filesize, fupl_options.locales);\n    if( max_filesize === false ) {\n      throw new Error( '\"' + fupl_options.max_filesize + '\" non è un valore corretto per `max_filesize`');\n    } else {\n      fupl_options.max_filesize = max_filesize;\n    }\n\n    // parametro o attributo multiple\n    fupl_options.multiple = Boolean(fupl_options.multiple ||\n      (_input && _input.hasAttribute('multiple') ));\n\n    // parametro o attributo required\n    fupl_options.required = Boolean(fupl_options.required ||\n      (_input && _input.hasAttribute('required') ));\n\n\n    // tipologia generale dell'uploader (img o doc) e modalità\n    // selezione file\n    fupl_options._type = fupl_options.filetype === 'img'? 'img' : 'doc';\n    fupl_options._mode = fupl_options.multiple? 'single' : 'multiple';\n\n    // testo label (da tag o parametro uploader_label_text)\n    if( !fupl_options.uploader_label_text && original_label) {\n      fupl_options.uploader_label_text = original_label.innerHTML;\n    }\n    // caso in cui sia presente nessun valore\n    if ( !fupl_options.uploader_label_text ) {\n      fupl_options.uploader_label_text = '__label non presente__';\n    }\n\n    // aggiunta della classe principale\n    fupl_options.element.classList.add(\"fupl\");\n\n    // aggiunta wrapper\n    // Questo elemento non viene usato nella procedura ed è necessario\n    // solo per il css\n    let wrapper = document.createElement('div');\n    fupl_options.element.parentNode.insertBefore(wrapper, fupl_options.element);\n    wrapper.appendChild(fupl_options.element);\n    wrapper.classList.add(\"fupl-wrapper\");\n    wrapper.classList.add(\"fupl-type-\" + fupl_options._type );\n    if(fupl_options.multiple) {\n      wrapper.classList.add(\"fupl-multiple\");\n    }\n    // aggiunta eventuali class' personale\n    if( fupl_options.element_class ) {\n      fupl_options.element.classList.add( ...fupl_options.element_class.split(' ') );\n    }\n\n    // aggiunta label uploader\n    if( fupl_options.uploader_add_label ) {\n      let _class = ['fupl-label'];\n      if( fupl_options.uploader_label_class ) {\n        _class.push(fupl_options.uploader_label_class);\n      }\n      if( fupl_options.required ) {\n        _class.push('required');\n      }\n      fupl_options.element.insertAdjacentHTML('beforebegin',\n        '<div class=\"fupl-label\">' +\n          '<label' + (_class.length? ' class=\"' + _class.join(' ') + '\"' : '') + '>' +\n            fupl_options.uploader_label_text +\n          '</label>' +\n        '</div>'\n      );\n      wrapper.classList.add( 'fupl-has-label' );\n    }\n\n    // aggiunta template uploader\n    fupl_options.element.innerHTML = fupl_options.templates.main;\n\n    fupl_options.istance_input = fupl_options.element.querySelector('.fupl-panel input[type=\"file\"]');\n    fupl_options.istance_label = fupl_options.element.querySelector('.fupl-panel label');\n    fupl_options.istance_dd_text = fupl_options.element.querySelector('.fupl-panel .fupl-dd-text');\n    fupl_options.istance_info_text = fupl_options.element.querySelector('.fupl-panel .fupl-info-text');\n    fupl_options.istance_result_wrapper = fupl_options.element.querySelector('.fupl-result');\n\n\n    // inserimento testi e attributi\n    // if( fupl_options.required ) {\n    //   fupl_options.istance_input.setAttribute('required', '');\n    // }\n    if( fupl_options.multiple ) {\n      fupl_options.istance_input.setAttribute('multiple', '');\n    }\n    if( fupl_options.accept !== null ) {\n      fupl_options.istance_input.setAttribute('accept', fupl_options.accept.join(','));\n    }\n\n    fupl_options.istance_label.insertAdjacentHTML('beforeend',\n      fupl_options.input_text[fupl_options._type][fupl_options._mode][0]\n    );\n    if(fupl_options.input_label_class) {\n      fupl_options.istance_label.classList.add(...fupl_options.input_label_class.split(' '));\n    }\n    fupl_options.istance_dd_text.innerHTML = fupl_options.input_text[fupl_options._type][fupl_options._mode][1];\n\n    // info text\n    fupl_options.istance_info_text.innerHTML = 'xxx';\n    if( fupl_options.show_info_text ) {\n      if(fupl_options.custom_info_text) {\n        fupl_options.istance_info_text.innerHTML = fupl_options.custom_info_text;\n      } else {\n        fupl_options.istance_info_text.innerHTML = upl.create_info_text(fupl_options);\n      }\n    }\n\n    // aggiunta valori\n    if( fupl_options.values ) {\n      fupl_options.values.forEach( item => {\n        fupl_options.createItem(item);\n      });\n    }\n\n\n    // esecuzione init_callback, se presente\n    if( fupl_options.init_callback !== null ) {\n      fupl_options.init_callback( fupl_options );\n    }\n\n\n    //debug\n    if( fupl_options.debug ) {\n      /* eslint-disable */\n      console.groupCollapsed('FileUploader options');\n      // creazione di un oggetto bidimensinale per\n      // semplificare la rappresentazione in tabella\n      let c_options = {},\n      c_keys = Object.keys(fupl_options);\n      c_keys.sort();\n      c_keys.forEach(item => {\n        let _toStringify = typeof fupl_options[item] === 'object' &&\n        fupl_options[item] !== null &&\n          item !== 'element';\n        c_options[item] = _toStringify ? JSON.stringify(fupl_options[item], null, ' ') : fupl_options[item];\n      });\n      console.table(c_options);\n      console.groupCollapsed('fupl_options');\n        console.log(fupl_options);\n      console.groupEnd();\n      console.groupEnd();\n      /* eslint-enable */\n    } // end if debug\n\n\n  }; // end upl.createUploader\n\n  return upl;\n\n})(FileUploader2 || {});\n\n\n\n  // //         // !DRAG&DROP\n  // //         fupl_options.element\n  // //         .on( 'drag dragstart dragend dragover dragenter dragleave drop', function( e ) {\n  // //           e.preventDefault();\n  // //           e.stopPropagation();\n  // //         })\n  // //         .on( 'dragover dragenter', function() {\n  // //           fupl_options.element.addClass( fupl_options.element_dragover_class );\n  // //         })\n  // //         .on( 'dragleave dragend drop', function() {\n  // //           fupl_options.element.removeClass( fupl_options.element_dragover_class );\n  // //         })\n  // //         .on( 'drop', function( e ) {\n  // //           var err = false;\n  // //           if( !fupl_options.is_multiple && e.originalEvent.dataTransfer.files.length > 1 ) {\n\n  // //             fupl_options.alertErrorAPI('Puoi selezionare un solo file!');\n  // //             err = true;\n  // //           }\n\n  // //           if(!err) {\n  // //             upl.sendFiles( e.originalEvent.dataTransfer.files, fupl_options ); // filelist\n  // //           }\n  // //         });\n\n  // // //TODO fumoso, da riscrivere\n  // // //TODO correggere selector, possibilità non abbia id\n  // //         // !selezione tramite input\n  // //         var input_selector = '#' + _input.attr('id');\n  // //         $(document).on('change', input_selector, function () {\n  // //           upl.sendFiles( document.querySelector(input_selector).files, fupl_options ); // filelist\n  // //         });\n\n\n  //       } catch(e) { //throw \"error\"\n  //         console.error( e );// eslint-disable-line\n  //       } // finally {}\n\n  //     }); // end document.querySelectorAll(upl.global_options.selector).forEach\n\n  //   }; // end init\n\n  //   return upl;\n\n  // })(FileUploader2 || {});\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  upl.createItem = (fupl_options, item_array) => {\n\n\n  }; // end upl.createItem\n\n  return upl;\n\n})(FileUploader2 || {});\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n  \"use strict\";\n\n\n  /**\n\t * create_info_text\n\t * (funzione) Genera la stringa riepilogativa delle limitazioni da rispettare\n\t * per la selezione dei file\n\t *\n   * - Restituisce la stringa informativa\n\t */\n\tupl.create_info_text = fupl_options => {\n    let info_text = [];\n\n    if( fupl_options.filetype === 'img' ) {\n      info_text.push( 'immagini in formato <strong>JPEG</strong>, <strong>PNG</strong>, <strong>GIF</strong> o <strong>WEBP</strong>' );\n\n      if( fupl_options.img_w && fupl_options.img_h ) {\n        info_text.push( 'dimensioni: <strong>' +  fupl_options.img_w + '&times;' + fupl_options.img_h + 'px</strong>');\n\n      } else {\n\n        if(fupl_options.img_w && fupl_options.img_h && fupl_options.img_w === fupl_options.img_h) {\n          info_text.push( 'larghezza e altezza <strong>' +  fupl_options.img_h + 'px</strong>');\n\n        } else if(fupl_options.img_min_w && fupl_options.img_min_h && fupl_options.img_min_w === fupl_options.img_min_h) {\n          info_text.push( 'larghezza e altezza non inferiori a <strong>' +  fupl_options.img_min_w + 'px</strong>');\n\n        } else if(fupl_options.img_max_w && fupl_options.img_max_h && fupl_options.img_max_w === fupl_options.img_max_h) {\n          info_text.push( 'larghezza e altezza non superiori a <strong>' +  fupl_options.img_max_w + 'px</strong>');\n\n        } else {\n\n          if( fupl_options.img_w ) {\n            info_text.push( 'larghezza <strong>' +  fupl_options.img_w + 'px</strong>');\n\n          } else if( fupl_options.img_min_w && fupl_options.img_max_w ) {\n            info_text.push( 'larghezza compresa tra <strong>' +  fupl_options.img_min_w + 'px</strong> e <strong>' + fupl_options.img_max_w + 'px</strong>');\n\n          } else if( fupl_options.img_min_w ) {\n            info_text.push( 'larghezza non inferiore a <strong>' +  fupl_options.img_min_w + 'px</strong>');\n\n          } else if( fupl_options.img_max_w  ) {\n            info_text.push( 'larghezza non superiore a <strong>' +  fupl_options.img_max_w + 'px</strong>');\n          }\n\n          if( fupl_options.img_h ) {\n            info_text.push( 'altezza <strong>' +  fupl_options.img_h + 'px</strong>');\n\n          } else if( fupl_options.img_min_h && fupl_options.img_max_h ) {\n            info_text.push( 'altezza compresa tra <strong>' +  fupl_options.img_min_h + 'px</strong> e <strong>' + fupl_options.img_max_h + 'px</strong>');\n\n          } else if( fupl_options.img_min_h ) {\n            info_text.push( 'altezza non inferiore a <strong>' +  fupl_options.img_min_h + 'px</strong>');\n\n          } else if( fupl_options.img_max_h  ) {\n            info_text.push( 'altezza non superiore a <strong>' +  fupl_options.img_max_h + 'px</strong>');\n          }\n        }\n      }\n\n    } else if( fupl_options.filetype === 'pdf' ) {\n      info_text.push( 'file in formato <strong>PDF</strong>' );\n    }\n\n    if( fupl_options.max_filesize !== null ) {\n      info_text.push( 'max <strong>' + fupl_options.max_filesize.feedback_size + '</strong>' );\n    }\n\n    let str = info_text.join(fupl_options.info_text_join_string);\n    str = str.charAt(0).toUpperCase() + str.slice(1);\n\n    if(fupl_options.info_text_wrap_string && str) {\n      str = fupl_options.info_text_wrap_string[0] + str + fupl_options.info_text_wrap_string[1];\n    }\n    return str;\n\t};\n\n  return upl;\n\n})(FileUploader2 || {});\n","/* globals FileUploader2:true */\n\nFileUploader2 = ( (upl) => {\n  \"use strict\";\n\n  // parametri di default condivisi da tutte le istanze\n  const default_options = {\n\n    // percorso del css FileUploader\n    css: null,\n\n    // Attiva la modalità debug che mostra in console le informazioni\n    // sulla configurazione corrente\n    debug: false,\n\n    // locales string, usata per la formattazione della stringa numerica\n    // mostrata all'utente ricavata da `max_filesize`\n    locales: 'it-IT',\n\n    // messaggio browser non compatibile\n    unsuitableBrowserMessage: 'Il tuo browser non ha tutte le funzionalità richieste da FileUploader',\n\n    // Interfaccia per l'invio di messaggi di errore\n    alert_api: (mes) => { window.alert(mes);},\n\n    // Url dello script lato server che esegue il caricamento del file\n    // per l'istanza in esame. Ha la precedenza sull'impostazione globale\n    // obbligatorio\n    url: null,\n\n    // Tipologia dei file selezionabili\n    // il valore deve corrispondere ad una delle chievi dell'array `mimetypes`\n    filetype: 'auto',\n\n    /*\n    Stringa di estensioni o mimetypes separati da virgola accettabili per l'uploader\n    corrente in aggiunta o sostituzione di quanto impostato tramite il parametro `filetype`.\n\n    L'eventuale attributo `accept` del campo input contenuto\n    nel contenitore uploader (se presente), svolge la stessa funzione.\n\n    In entrambi i casi, i valori sono presi in considerazione solo se `filetype == 'auto'`\n\n    In presenza sia del parametro che dell'attributo `accept`, viene effettuato un merge,\n    e l'attributo ha la precedenza sul parametro.\n    Se il parametro è `null` e l'attributo `accept` non è presente,\n    con `filetype == auto` vengono accettati tutti i tipi di file.\n    */\n    accept: null,\n\n    /*\n    Parametro multiple.\n    Attiva la possibilità di acquisire più file con lo stesso uploader.\n    L'attivazione di questa opzione può essere effettuata anche tramite il parametro\n    del campo `input` /se presente)\n    */\n    multiple: false,\n\n    /*\n    Parametro required.\n    Eventuale impostazione del campo come obbligatorio.\n    L'attivazione di questa opzione può essere effettuata anche tramite il parametro\n    del campo `input` /se presente)\n    */\n    required: false,\n\n    /*\n      Template dei markup utilizzati\n      - `main`         : markup principale inserito dentro l'elemento indicato da\n                         `upl.global_options.selector`. L'elemento, a cui viene inoltre\n                         aggiunta la classe `flup`, viene inoltre racchiuso in un elemento\n                         `div.flup-wrapper`\n\n      - `single_img`   : template aggiuntivo per immagini singole\n      - `multiple_imgs`: template aggiuntivo per immagini multiple\n      - `single_doc`   : template aggiuntivo per documenti singoli\n      - `multiple_docs`: template aggiuntivo per documenti multipli\n      - `no_file`      : template per indicare l'assenza di file\n\n      Consulta il readme per ulteriori dettagli.\n\n      Il markup di default utilizza classi di Boostrap 4.\n\n      L'eventuale contenuto dell'elemento originale viene eliminato (può contenere\n      un elemento type[file] per eventuale procedura di fallback)\n\n      I template possono essere alterati a piacimento, purché si mantengano le classi\n      `fupl-*` utilizzate nella procedura.\n\n      `multiple_docs` e `multple_imgs` possono essere null, in questo caso vengono utilizzati\n      gli stessi markup per singolo file\n    */\n    templates: {\n      // wrapped in <div class=\"fupl-wrapper\"><div class=\"fupl\"></div></div>\n      main: '<div class=\"fupl-result\"></div>' +\n        '<div class=\"fupl-panel\">' +\n          '<div class=\"fupl-button\">' +\n            '<label><input type=\"file\"></label>' +\n            '<div class=\"fupl-dd-text\">{</div>' +\n          '</div>' +\n          '<div class=\"fupl-info-text\"></div>' +\n        '</div>',\n\n      // contenuto di fupl-result quando non sono presenti files\n      no_file: '<div class=\"fupl-result-empty text-muted small font-italic\"></div>',\n\n      // trigger per la rimozione di un elemento da .fupl_results\n      // è aggiunto all'interno dell'elemento `.fupl-elimina`, presente in ognuno\n      // degli elementi successivi\n      // Deve essere un elemento button\n      remove_btn: '<button type=\"button\" class=\"close\" aria-label=\"Elimina\" title=\"Elimina questo file\">' +\n            '<span aria-hidden=\"true\">&times;</span>' +\n          '</button>',\n\n      single_img: '<div class=\"fupl-item\">' +\n        '<div class=\"fupl-elimina\"></div>' +\n        '<img alt=\"Immagine caricata\" class=\"img-fluid\">' +\n        '<div class=\"fupl-file-info\">' +\n          '<div class=\"text-truncate fupl-file-name\"></div>' +\n          '<div class=\"fupl-file-size\"></div>' +\n        '</div>' +\n      '</div>',\n\n      multiple_imgs: '<div class=\"fupl-item\">' +\n          '<div class=\"fupl-elimina\"></div>' +\n          '<div class=\"fupl-img\">' +\n            '<img alt=\"Immagine caricata\" class=\"img-fluid\">' +\n          '</div>' +\n          '<div class=\"fupl-file-info\">' +\n            '<div class=\"text-truncate fupl-file-name\"></div>' +\n            '<div class=\"fupl-file-size\"></div>' +\n          '</div>' +\n        '</div>',\n\n      single_doc: '<div class=\"fupl-item\">' +\n          '<div class=\"fupl-elimina\"></div>' +\n          '<div class=\"fupl-doc text-truncate\">' +\n            '<a href=\"#\" class=\"text-truncate fupl-file-name\"></a>' +\n          '</div>' +\n          '<span class=\"small ml-1 text-nowrap fupl-file-size\"></span>' +\n        '</div>',\n\n      multiple_docs: null // usa single_doc\n    },\n\n    // testo da inserire in `fupl-result-empty` per immagine non presente (`{{nofile_text}}`)\n    no_img_text: 'Nessuna immagine presente',\n\n    // testo da inserire in `fupl-result-empty` per documento (pdf o altro) non presente\n    // (`{{nofile_text}}`)\n    no_doc_text: 'Nessun file presente',\n\n    // Eventuale classe da aggiungere all'elemento FileUploader al\n    // momento dell'inizializzazione\n    element_class: null,\n\n    // Classe da aggiungere all'elemento FileUploader quando un file\n    // vi è trascinato sopra\n    element_dragover_class: 'fupl-is-dragover',\n\n    // Label da applicare da applicare all'elemento FileUploader.\n    // Se `null` e se esiste un elemento `label` all'interno dell'uploader,\n    // viene preso il testo dell'elemento\n    uploader_label_text: null,\n\n    // Opzione per l'aggiunta di un tag label prima dell'elemento uploader\n    uploader_add_label: true,\n\n    // Eventuale classe da aggiungere ad uploader_label\n    uploader_label_class: null,\n\n    /*\n    Array (o stringa json) dei testi del label del tag input (il primo elemento dell'array) e del testo\n    informativo per il drag &drop da inserire in `.fupl-dd-text` (il secondo elemento)\n    nelle varie combinazioni (img singola e multiple, doc singole e multipli)\n    segnaposti: ['{{input_label}}', '{{dd_text}}']\n    */\n    input_text: {\n      img: {\n        single:   [\"Seleziona un'immagine\", \"\\u2026oppure trascinala qui\"],\n        multiple: [\"Seleziona una o più immagini\", \"\\u2026oppure trascinale qui\"]\n      },\n      doc: {\n        single: [\"Seleziona un documento\", \"\\u2026oppure trascinalo qui\"],\n        multiple: [\"Seleziona uno o più documenti\", \"\\u2026oppure trascinali qui\"]\n      }\n    },\n\n    // classi da applicare al tag label dell'input[file] generato, utilizzato\n    // come pulsante per la selezione dei file\n    input_label_class: 'btn btn-outline-primary btn-sm',\n\n    // indica se mostrare o no il testo informativo su formati accettati,\n    // dimensioni immagini, ecc. Se si decide di non mostrarlo, potrebbe essere\n    // necessario rimuovere dal template l'elemento `.fupl-info-text`\n    show_info_text: true,\n\n    // stringhe aggiunte all'inizio e alla fine del testo informativo generato\n    // utilizzate solo se `custom_info_text` non è impostato\n    info_text_wrap_string: ['(', ')'],\n\n    // Stringa utilizzata per concatenare tra loro le varie parti del testo informativo generato\n    // utilizzata solo se `custom_info_text` non è impostato\n    info_text_join_string: ', ',\n\n    // Eventuale testo informativo personalizzato. se presente,\n    // sostituisce il testo generato in base ai formati, ai limiti di dimensioni, ecc.\n    custom_info_text: null,\n\n    /*\n    impostazioni per le immagini.\n    Applicate solo se filetype == 'img'.\n    Valori numerici che corrispondono alle dimensioni in pixel richieste per l'immagine.\n    I parametri img_min_* e img_max_* possono essere assegnati simultaneamente,\n    ma sono ignorati se esistono i corrispondenti parametri esatti (ad esempio,\n    se è presente img_w, i parametri img_min_w e img_max_w non vengono presi in considerazione).\n    Il valore di default di tutti i parametri è null, che significa che non vengono applicati.\n\n      * `img_min_w`: larghezza minima dell'immagine\n      * `img_max_w`: larghezza massima dell'immagine\n      * `img_w`: larghezza esatta dell'immagine\n      * `img_min_h`: altezza minima dell'immagine\n      * `img_max_h`: altezza massima dell'immagine\n      * `img_h`: altezza esatta dell'immagine\n    */\n    img_min_w   : null,\n    img_max_w   : null,\n    img_w       : null,\n    img_min_h   : null,\n    img_max_h   : null,\n    img_h       : null,\n\n    /*\n    Dimensione (peso) massima dell'immagine. Può essere un numero,\n    e in questo caso corrisponde ad una dimensione in KB, o una stringa\n    composta da un valore numerico e da un suffisso tra ‘KB’ e ‘MB’ (anche minuscoli).\n    Se il valore è null o se la stringa non viene riconosciuta,\n    non è applicato nessun limite.\n    */\n    max_filesize: null,\n\n    // Prefisso della variabile utilizzata per inviare al server i dati\n    // di ogni singolo file caricato. Il valore indicato è il nome base dell'array\n    // costruito per inviare i valori al server.\n    varname: 'file',\n\n    // Funzione richiamata dopo l'inizializzazione di ogni elemento FileUploader.\n    // La funzione viene invocata con l'oggetto di tutte le opzioni come argomento\n    init_callback: null,\n\n    /*\n    Funzione richiamata ogni volta che un file viene inviato al server.\n    La funzione viene invocata passandole un oggetto contenente:\n      * `item_id`: id univoco del documento in elaborazione\n      * `filelist_item`: oggetto filelist corrente,\n      * `img_preview` : miniatura dell'immagine in forma di stringa Base64\n        (null se si tratta di altre tipologie)\n      * `uploader_options`: oggetto `options` corrente\n      * `img_wi` e `img_he`: dimensioni in pixel dell'immagine.\n        null se non si tratta di immagini\n    */\n    upload_start_callback: null,\n\n    /*\n    Funzione richiamata ogni volta che un file viene caricato.\n    La funzione viene invocata passandole un oggetto contenente:\n      * `item_id`: id univoco del documento in elaborazione,\n      * `server_error`: null, se l'upload è stato completato correttamente oppure,\n        in caso contrario, stringa con il messaggio di errore restituito\n      * `filelist_item`: oggetto filelist corrente,\n      * `hidden_fields`: stringa con i campi hidden da inviare al server\n      * `uploader_options`: oggetto `options` corrente\n      * `img_wi` e img_he: dimensioni in pixel dell'immagine.\n        null se non si tratta di immagini\n    */\n    upload_complete_callback: null,\n\n    /*\n    Array json degli eventuali elementi preregistrati, nella forma:\n      [\n        {\n          id →  identificativo univoco del file (può essere anche il percorso sul server)\n          n  → nome del file\n          w  → larghezza in px (se immagine) oppure assente o null\n          h  →  altezza in px (se immagine) oppure assente o null\n          s  → dimensione in bytes\n        }\n        [...]\n      ]\n\n      l'id viene aggiunto come attributo `data` al pulsante di eliminazione del file\n      (genera un hidden con l'id del file da eliminare dal server)\n    */\n    values: [],\n\n    // varname degli hidden con gli id dei file già registrati  da eliminare\n    delete_varname: 'name=\"elimina_file[]',\n\n// TODO\n    // attiva la possibilità di riordinare gli elementi trascinandoli\n    reorder: false,\n\n    // name della variabile hidden usata per registrare l'ordinamento\n    reorder_varname: 'order'\n  };\n\n  upl.setOptions = (...custom_options) => {\n\n    if( typeof Object.assign === \"function\") {\n      return Object.assign(\n        {},\n        default_options,\n        ...custom_options\n      );\n\n    } else { // IE 11\n      let opts = {};\n      for(let i in default_options) {\n        opts[i] = default_options[i];\n        custom_options.forEach( item => {\n          if(item[i] !== undefined) {\n            opts[i] = item[i];\n          }\n        });\n      }\n      return opts;\n    }\n  };\n\n  return upl;\n\n})(FileUploader2 || {});\n","/* globals FileUploader2:true */\n\nFileUploader2 = ((upl) => {\n\n  // mimetypes ed estensioni accettabili in base al parametro `filetype`.\n  // Il parametro `auto` accetta tutti i tipi di file (salvo eventuali limitazioni\n  // aggiunte tramite parametro e attributo `accept`)\n  upl.mimetypes = {\n    auto : null,\n    img  : ['image/png', 'image/jpeg', 'image/pjpeg', 'image/gif', 'image/webp',\n            '.png', '.jpg', '.jpeg', '.pjpg', '.pjpeg', '.gif', '.webp'],\n    pdf  : ['application/pdf', '.pdf']\n  };\n\n\n  /*\n   parse_max_filesize\n   elabora il parametro `filesize_value` (se esiste) e restituisce:\n    - `null` se `filesize_value` === null`\n    - `false` se `filesize_value` non è un valore corretto\n    - l'oggetto `{ maxbytes: 123456, unit: 'KB', feedback_size: ''}`\n    in cui:\n      - `maxbytes` è il valore in bytes del limite imposto\n      - `unit` è uno tra 'KB' e 'MB'\n      - `feedback_size` è la rappresentazione per un eventuale feedback per l'utente\n  */\n  upl.parse_max_filesize = (filesize_value, locales) =>  {\n    // controllo max_filesize ed elaborazione parametro\n    if( filesize_value ) {\n      var maxbytes, unit, feedback_size;\n\n      if(!isNaN(filesize_value)) { //solo numero, si assume siano KB\n        maxbytes = +filesize_value;\n        unit = 'KB';\n        feedback_size = maxbytes;\n\n      } else {\n\n        unit = filesize_value.substr(-2, 2).toUpperCase();\n        maxbytes = +filesize_value.substr(0, filesize_value.length-2);\n        feedback_size = maxbytes;\n\n        if(isNaN(maxbytes) || (unit !== 'KB' && unit !== 'MB') ) {\n          return false;\n        }\n      }\n\n      // se l'unità è indicata in KB ma il valore è più grande\n      // di un MB, il parametro viene aggiornato\n      if( maxbytes >= 1024 && unit === 'KB') {\n        unit = 'MB';\n        feedback_size = (Math.round((maxbytes / 1024) * 100) /100);\n      }\n\n      if(unit === 'KB') {\n        maxbytes = maxbytes * 1024;\n      } else {\n        maxbytes = maxbytes * 1024 * 1024;\n      }\n\n      if(!Number.isInteger(feedback_size)) {\n        feedback_size = feedback_size.toFixed(1);\n      }\n\n      return {\n        //'original_value': filesize_value,\n        //'unit'         : unit,\n        'maxbytes'     : maxbytes,\n        'feedback_size': feedback_size.toLocaleString(locales) + '&nbsp;' + unit\n      };\n\n    } else {\n      return null;\n    }\n  };\n\n  return upl;\n\n})(FileUploader2 || {});\n"]}